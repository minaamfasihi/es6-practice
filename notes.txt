- all var declarations move to the top of the function.
- var declaration has a functional scope.
- let declarations are not hoisted and are block-scoped.
- let variables cannot be redeclared. however, they can each be declared in separate blocks.
- const declarations are also not hoisted, are block-scoped and must be set mandatorily. 
- const values cannot be changed unless they point to an object in which case you can change the value of any attribute of
object, however you cant reset the object ref to any other object.
- this points to the currently executing function. whereas arrow functions () retain the context of their parent.
- you can use literals, variables and even functions to assign default values to parameters. but if you dont pass actual values,
and make use of the default values, the arguments object inside the function will have length 0.
- rest operator takes in a variable number of arguments, and make them into an array.
- let displayColors = function(message, ...colors) {
    console.log(message)
    console.log(colors)
    console.log(arguments.length)

    for (let i in colors) {
        console.log(colors[i])
    }
}

- let message = "list of colors"
- displayColors(message, 'red'); // rest operator will make an array: colors = ['red']
- displayColors(message, 'red', 'blue'); // rest operator will make an array: colors = ['red', 'blue']
- displayColors(message, 'red', 'green', 'ser'); // rest operator will make an array: colors = ['red', 'green', 'ser']
- rest operator is specified in the function declaration whereas the spread operator is used in function call.
If we do:
let colorArray = ["Orange", "silver"]
then we cant pass colorArray in displayColors function because the rest operator expects variable number of individual elements.
So, here we can do:
displayColors(message, ...colorArray); // ...colorArray will split the array elements into comma-separated elements.
- - object literals:
if the key and value are same, you can simply omit the value. 
let firstname = "munnu"
let person = {
    firstname
}
console.log(person.firstname);

- function createPerson(firstname, lastname) {
    let fullname = firstname + " " + lastname;
    return { firstname, lastname, fullname }; // you can do this in es6
}
let p = createPerson("Ross", "Geller")
console.log(p.firstname); // Ross
console.log(p.lastname); // Geller

- We can use functions in a new way in objects when returning from functions:
function createPerson(firstname, lastname) {
    let fullname = firstname + " " + lastname;
    return { firstname, 
    lastname, 
    fullname, 
    isSenior() {
        return age > 60;
    } 
    }; 
}

- es6 allows us to have spaces between name of a key in an object literal:
let ln = "last name" // we can have variable names for keys in object literal
let person = {
    "first name": "Chandler",
    [ln]: "Bing"
}
console.log(person["first name"]) // only caveat is that now you cannot use the dot notation, you have to use square brackets.


